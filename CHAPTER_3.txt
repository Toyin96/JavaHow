** chapter 3 depends on the terminology and concepts of object-oriented programming

***In this chapter, you’ll learn how to create your own classes and methods. Each new class you create becomes a new type that can be used to declare variables and create objects.

***You can declare new classes as needed; this is one reason why Java is known as an extensible language. 

****In this chapter, we introduce data type double to represent an account balance as a number that can contain a decimal point—such numbers are called floating-point numbers. 

3.2) INSTANCE VARIABLES, get METHODS AND set METHODS

***A class’s instance variables maintain data for each object (that is, each instance) of the class. 

***Most instance-variable declarations are preceded with the keyword private.

*** Keyword new creates a new object of the specified class


***Instance variables are declared in the class body but not within the class's methods. the variables inside the class's methods are called local variables.

***We refer to the first line of each method declaration (line 10 in this case) as the method header. 

  EXAMPLE 

public String getAccountName()
      {
         return accountName;
    
      }

In this case, the method header is the "public String getAccountName()"

**Method setName receives parameter name of type String—which represents the name that will be passed to the method as an argument

**Parameters are declared in a parameter list, which is located inside the parentheses that follow the method name in the method header. 

****When there are multiple parameters, each is separated from the next by a comma. 

****Each parameter must specify a type (in this case, String) followed by a variable name

**Parameters Are Local Variables

***Variables declared in a particular method’s body (such as main) are local variables which can be used only in
that method. 

****When a method terminates, the values of its local variables are lost. 

***A method’s parameters also are local variables of the method.

setName METHOD BODY

***Every method body is delimited by a pair of braces containing one or more statements that perform the method’s task(s). 

getName METHOD OF CLASS ACCOUNT

***Driver Class contains the main method and it creates an object of the class from which its methods can be used to maniulate its instance variables which are private.

**As you’ll learn in Section 3.4, those parentheses in combination with a class name represent a call to a constructor, which is similar to a method but is called implicitly by the new operator to initialize an object’s
instance variables when the object is created. 

**when you compile the driver class, the java compiler automatically compiles both files...

***to copile all fines in a particular directory, simply use the command:

   javac *.java

***We’ll often use UML class diagrams to summarize a class’s attributes and operations.

**the UML class diagrams always have three compartments namely: top, middle, and bottom compartments.

Top compartment contains the class name
middle compartment contains the class attributes
bottom compartment contains the class operations/methods

**Instance variable name is private in Java, so the UML class diagram lists a minus sign (–) access modifier before the attribute name. Following the attribute name are a colon and the attribute type, in this case String. 

****Variables or methods declared with access modifier private are accessible only to methods of the class in which they’re declared. 

****TOP COMPARTMENT

In the UML, each class is modeled in a class diagram as a rectangle with three compartments. In this diagram the top compartment contains the class name Account centered horizontally in boldface type.

MIDDLE COMPARTMENT

The middle compartment contains the class’s attribute name, which corresponds to the instance variable of the same name in Java. Instance variable name is private in Java, so the UML class diagram lists a minus sign (–) access modifier before the attribute name. Following the attribute name are a colon and the attribute type, in this case String.

e.g

- accountBalance: int

BOTTOM COMPARTMENT

The bottom compartment contains the class’s operations, setName and getName, which correspond to the methods of the same names in Java. 

The UML models operations by listing the operation name preceded by an access modifier, in this case + getName. This plus sign (+) indicates that getName is a public operation in the UML (because it’s a public method in Java).

Operation getName does not have any parameters, so the parentheses following the operation name in the class diagram are empty,

Operation setName, also a public operation, has a String parameter called name. 

***Declaring instance variables with access modifier private is known as data hiding or information hiding.

***When a program creates (instantiates) an object of class Account, variable name is encapsulated (hidden) in the object and can be accessed only by methods of the object’s class.  

Primitive Types vs. Reference Types

***Java’s types are divided into primitive types and reference types. In Chapter 2, you worked with variables of type int—one of the primitive types. The other primitive types are boolean, byte, char, short, long, float and double, each of which we discuss in thisbook—these are summarized in Appendix D. 

**All nonprimitive types are reference types, so classes, which specify the types of objects, are reference types.

**A primitive-type variable can hold exactly one value of its declared type at a time. For example, an int variable can store one integer at a time. When another value is assigned to that variable, the new value replaces the previous one—which is lost.

****Recall that local variables are not initialized by default. Primitive-type instance variables are initialized by default—instance variables of types byte, char, short, int, long, float and double are initialized to 0, and variables of type boolean are initialized to false.

**You can specify your own initial value for a primitive-type variable by assigning the variable a value in its declaration, as in

private int numberOfStudents = 10;

***Programs use variables of reference types (normally called references) to store the addresses of objects in the computer’s memory

Such a variable is said to refer to an object in the program. 

***Java requires a constructor call for every object that’s created, so this is the ideal point to initialize an object’s
instance variables.

Displaying Text in a Dialog Box

**Many apps use windows or dialog boxes (also called dialogs) to display output. 

Typically, dialog boxes are windows in which programs display important messages to users. 

*** Class JOptionPane provides prebuilt dialog boxes that enable programs to display windows containing messages—such windows are called message dialogs. 

****the program uses class JOptionPane from package javax.swing. This
package contains many classes that help you create graphical user interfaces (GUIs). GUI components facilitate data entry by a program’s user and presentation of outputs to the user.

***JOptionPane.showMessageDialog(null, "Welcome to Java programming!");

***Line 3 indicates that the program uses class JOptionPane from package javax.swing. This package contains many classes that help you create graphical user interfaces (GUIs). 

GUI components facilitate data entry by a program’s user and presentation of outputs to the user. Line 10 calls JOptionPane method showMessageDialog to display a dialog box containing a message. 

The method requires two arguments. The first helps the Java app determine where to position the dialog box.

***Introducing static Methods

***JOptionPane method showMessageDialog is a so-called static method. Such methods often define frequently used tasks. For example, many programs display dialog boxes, and the code to do this is the same each time. 

**Rather than requiring you to “reinvent the wheel” and create code to display a dialog, the designers of class JOptionPane declared a static method that performs this task for you.

  ClassName.methodName(arguments)

***GUI (Graphical User Interfaces)

     SUMMARY

Each class you create becomes a new type that can be used to declare variables and create objects. 

***Class, method and variable names are identifiers. By convention all use camel case names. 

**Class
names begin with an uppercase letter, and method and variable names begin with a lowercase letter.

**Parameters are declared in a comma-separated parameter list (p. 73), which is located inside the
parentheses that follow the method name in the method declaration. 

**Multiple parameters are separated by commas. Each parameter must specify a type followed by a variable name. 

**Variables declared in the body of a particular method are local variables and can be used only in
that method. When a method terminates, the values of its local variables are lost. A method’s parameters are local variables of the method.

***Every method’s body is delimited by left and right braces ({ and }). 

***parentheses is ()

*** A class that creates an object of another class, then calls the object’s methods, is a driver class.

***Scanner method nextLine (p. 75) reads characters until a newline character is encountered, then returns the characters as a String. 

***Scanner method next (p. 75) reads characters until any white-space character is encountered,
then returns the characters as a String. 

*** Declaring instance variables private is known as data hiding or information hiding. 

****An import declaration is not required if you always refer to a class with its fully qualified class
name, which includes its package name and class name. 

***Types in Java are divided into two categories—primitive types and reference types. The primitive
types are boolean, byte, char, short, int, long, float and double. All other types are reference
types, so classes, which specify the types of objects, are reference types. 

***A primitive-type variable can store exactly one value of its declared type at a time. 

***Primitive-type instance variables are initialized by default. Variables of types byte, char, short,
int, long, float and double are initialized to 0. Variables of type boolean are initialized to false. 

***Reference-type instance variables are initialized by default to the value null.